I"\<h1 id="写在前面">写在前面</h1>

<p>最近想尝试一下GitHub提供的GitHub Pages功能,通过GitHub强大的服务器支持,可以免费搭建自己的个人站点(个人博客),看了很多博客和教程,特别是Jekyll的官方文档,终于摸索出来一套属于Mac的个人站点搭建方法.</p>

<p>我主要使用了Jekyll作为渲染静态页面的引擎,本来是想直接拷贝别人做好的,然后自己再进行修改,但是感觉这样还是学不到东西,所以还是自己亲自动手实现一下啦~</p>

<p>本文部分参考了阮一峰老师的博客<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">1</a></sup>以及Jekyll的step-by-step-tutorial文档<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">2</a></sup>,(不得不说Dash是真的不错,校园网时好时坏的情况下还是要靠离线文档挑大梁了).教程部分主要选取了jekyll的官方教程<sup id="fnref:3:1" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">2</a></sup>,教程是英文的,不过写的很详细,想深入学习的话还得看官方文档.</p>

<h1 id="前期准备">前期准备</h1>

<h2 id="github">GitHub</h2>

<p>首先你需要有一个GitHub账号,并且创建一个名为<code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>的仓库,这样可以通过直接在浏览器中访问<code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>来进入自己的站点;</p>

<p>创建这个仓库之后,就可以clone到本地,然后进行自己的更改了;</p>

<p>接下来是Jekyll的配置.</p>

<h2 id="jekyll">Jekyll</h2>

<p>一开始我以为直接使用Mac自带的ruby环境就可以下载Jekyll和bundler了,但是一番操作之后发现并不行…无奈对ruby不是很了解,走了弯路,之后我发现在Jekyll的官方安装文档<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup>中有关于macOS如何安装Jekyll的介绍,很快就完成了Jekyll及其依赖的安装.</p>

<p>首先你需要安装命令行开发工具(终端输入<code class="language-plaintext highlighter-rouge">xcode-select --install</code>),完成之后下载本地编译版brew,这个我在之前已经写过一篇文章,大家可以参考一下<a href="https://blog.csdn.net/qq_41437512/article/details/112435816">《m1 MBA配置Homebrew环境+国内源配置》</a>,然后输入:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>ruby
<span class="c"># 添加ruby路径到环境变量</span>
<span class="nb">echo</span> <span class="s1">'export PATH="/opt/homebrew/opt/ruby/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">source</span> ~/.zshrc
</code></pre></div></div>

<p>然后在终端查看ruby安装位置与版本信息:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which ruby 
ruby <span class="nt">-v</span>
</code></pre></div></div>

<p>使用ruby的包管理器<code class="language-plaintext highlighter-rouge">gem</code>安装Jekyll及bundle(这一步如果速度慢的话可以添加ruby的国内源镜像)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 移除默认镜像</span>
<span class="nb">sudo </span>gem sources <span class="nt">--remove</span> https://rubygems.org/
<span class="c"># 添加国内镜像</span>
<span class="nb">sudo </span>gem sources <span class="nt">-a</span> http://gems.ruby-china.com/
<span class="c"># 查看镜像列表</span>
gem sources <span class="nt">-l</span>
<span class="c"># 安装bundler和jekyll</span>
<span class="nb">sudo </span>gem <span class="nb">install</span> <span class="nt">--user-install</span> bundler jekyll
<span class="c"># 安装缺失的包(也可以视情况安装,看看后面会不会因为这个包而报错)</span>
<span class="nb">sudo </span>gem <span class="nb">install </span>webrick
<span class="c"># 将gem安装的包路径添加到环境变量</span>
<span class="nb">echo</span> <span class="s1">'export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">source</span> ~/.zshrc
</code></pre></div></div>

<p>最后可以通过<code class="language-plaintext highlighter-rouge">gem env</code>检查路径是否正确(正确的话会在路径中显示安装gem包的家目录)</p>

<h1 id="搭建个人站点博客">搭建个人站点(博客)</h1>

<p>完成上述的几个步骤后,就可以创建自己的个人站点了,这里需要先创建几个文件(文件夹)如下:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">_config.yml</code>: 配置文件(yaml)</li>
  <li><code class="language-plaintext highlighter-rouge">_layouts/default.html</code>: 网页模板文件(html)</li>
  <li><code class="language-plaintext highlighter-rouge">_posts/2021-03-23-blog1.md</code>: 你的博客文章就放在这里(可以用HTML,也可以用Markdown)</li>
  <li><code class="language-plaintext highlighter-rouge">index.md</code>: Blog的Markdown主页</li>
</ol>

<p>这几个文件夹中的内容已经足够渲染出一个包含基本内容的博客了,但是如果想实现更为复杂的功能就还需要新建一些配置文件/文件夹,后面我们会说到.</p>

<h1 id="基本的四个文件">基本的四个文件</h1>

<h2 id="1-_configyml配置文件">1. _config.yml配置文件</h2>

<p>该文件用来<strong>配置网页的标题等信息</strong>,第一行设置根目录位置,第二行选择Markdown为博客编辑语言,之后是标题和描述信息.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">baseurl</span><span class="pi">:</span> <span class="s">/</span>
<span class="na">markdown</span><span class="pi">:</span> <span class="s">kramdown</span>

<span class="na">title</span><span class="pi">:</span> <span class="s">My Homepage</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">share some useful skills and tips</span>
</code></pre></div></div>

<h2 id="2-_layoutsdefaulthtml网页模板文件">2. _layouts/default.html网页模板文件</h2>

<p>单下划线+layouts作为文件目录,里面的html文件都是你的博客的模板,<code class="language-plaintext highlighter-rouge">default</code>是一个所有页面都要遵循的主模板,这个模板主体使用的是HTML标记语言,双大括号或者大括号内包含百分号这样的表达式是一种名叫Liquid的模板语言.</p>

<p>除了default模板,你还可以创建<code class="language-plaintext highlighter-rouge">post.html</code>文件作为<code class="language-plaintext highlighter-rouge">_posts</code>文件夹内博客文章的模板,只需要在文档的开头使用三个短线包裹的部分中加入yaml配置即可,如下是基本的<code class="language-plaintext highlighter-rouge">default.html</code>文件:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>Github pages博客  搭建与配置<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>下面是博客内容的模板文件<code class="language-plaintext highlighter-rouge">post.html</code>,这里先在文件头部指定了布局为<code class="language-plaintext highlighter-rouge">default</code>,相当于一种对default的继承,下面实现了显示文章的标题,日期以及作者的功能,最后面的``是内容(正文)部分.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: default
---

<span class="nt">&lt;h1&gt;</span>Github pages博客  搭建与配置<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  25 Mar 2021 - zorchp
<span class="nt">&lt;/p&gt;</span>


</code></pre></div></div>

<h2 id="3-_posts20210323-blog1md博客文章">3. _posts/2021/03/23-blog1.md博客文章</h2>

<p>这个就是博客的主文件了,只需要声明布局及作者(可选)就可以:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">xxx</span>
<span class="nn">---</span>

<span class="gu">## 写在前面</span>

这是我的第一个个人博客
</code></pre></div></div>

<h2 id="4-indexmd网页主页">4. index.md网页主页</h2>

<p>这里是一个你网站的主页,也就是<code class="language-plaintext highlighter-rouge">xxx.github.io</code>这个网站打开时显示的默认页面,这里我采用了Markdown语言,大家也可以采用可定制性更高的html.<code class="language-plaintext highlighter-rouge">Zorch's Homepage</code>会输出当前的页面标题.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">欢迎来到我的博客</span>

<span class="nn">---</span>

Zorch's Homepage

</code></pre></div></div>

<h1 id="用来扩展的其他文件">用来扩展的其他文件</h1>

<p>除了上面的四个基本文件,想要实现更为复杂的页面样式的话,还需要添加一些其他的文件,如图片\CSS样式等,这就需要一些其他的文件来配置了.</p>

<h2 id="css样式">CSS样式</h2>

<p>首先来看看CSS样式如何在你的网站中实现,一般来说网站的建设要遵循样式与内容分离的,所以最好将你的CSS样式独立出来,便于之后的维护.</p>

<p>需要新建两个文件:</p>

<h3 id="_sassmainscss文件"><code class="language-plaintext highlighter-rouge">_sass/main.scss</code>文件</h3>

<p>保存css样式,例如可以添加如下内容:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.current</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">green</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="assetscssstylesscss文件"><code class="language-plaintext highlighter-rouge">assets/css/styles.scss</code>文件</h3>

<p>用于指出css文件存放的位置,其内容为</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">---</span>

<span class="nt">---</span>

<span class="k">@import</span> <span class="s1">"main"</span><span class="p">;</span>
</code></pre></div></div>

<p>这里的yaml头是必要的,用来声明jekyll引擎要处理的文档,下面的语句代表导入上面的<code class="language-plaintext highlighter-rouge">main.scss</code>样式文件.</p>

<p>然后我们还需要将CSS的路径添加到default.html模板文件中,这样才可以正确导入CSS,即在default.html文件中的<code class="language-plaintext highlighter-rouge">&lt;head&gt;&lt;/head&gt;</code>标签中加入:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">&lt;!-- 添加CSS路径到当前文件 --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/assets/css/styles.css"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h2 id="设置博客列表及关于页面">设置博客列表及关于页面</h2>

<p>有了主页还不够,还需要加上能够显示所有博客的一个列表,在站点根目录下新建一个<code class="language-plaintext highlighter-rouge">blog.html</code>文件,输入以下内容:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: default
title: Blog
---

<span class="nt">&lt;h1&gt;</span>最新文章<span class="nt">&lt;/h1&gt;</span>

{% comment %}Alot of liquid code{% endcomment %}
{% assign toto = "Welcome to the hack !" %}
{% assign string = "a,b,c,d" %}
{% assign array = string | split:"," %}
{% for item in array %}
{{ item }}
{% endfor %}

<span class="c">&lt;!-- 链接到全部博客(for循环遍历) --&gt;</span>
<span class="nt">&lt;ul&gt;</span>
    
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>这里使用Liquid的for循环遍历_posts目录下的所有文章并输出标题及文章的默认第一段(相当于预览).</p>

<p>之后是一个about页面,同样在根目录下新建文件<code class="language-plaintext highlighter-rouge">about.md</code>,这里可以放上你的个人介绍等内容,内容如下:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">About</span>
<span class="nn">---</span>

<span class="gh"># About page</span>

This page tells you a little bit about me.
</code></pre></div></div>

<h2 id="导航栏">导航栏</h2>

<p>一般的HTML都需要一个导航栏来实现页面之间的跳转,HTML就实现了这一基本功能,这时候需要在网站的根目录下新建<code class="language-plaintext highlighter-rouge">/_includes/navigation.html</code>文件,文件的内容为:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 设置导航栏,并使当前网页高亮显示 --&gt;</span>
<span class="nt">&lt;nav&gt;</span>
    
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/"</span> <span class="nt">&gt;</span>
      Home
    <span class="nt">&lt;/a&gt;</span>
    
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/blog.html"</span> <span class="nt">&gt;</span>
      Blog
    <span class="nt">&lt;/a&gt;</span>
    
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/about.html"</span> <span class="nt">&gt;</span>
      About
    <span class="nt">&lt;/a&gt;</span>
    
<span class="nt">&lt;/nav&gt;</span>
</code></pre></div></div>

<p>这里使用Liquid设置了一个for循环,用来遍历主页/博客页面及关于页面.</p>

<p>要实现正常的链接跳转,还需要新建一个配置文件<code class="language-plaintext highlighter-rouge">_data/navigation.yml</code>,即yml文件,用来告诉导航栏要显示的内容以及超链接:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Home</span>
  <span class="na">link</span><span class="pi">:</span> <span class="s">/</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Blog</span>
  <span class="na">link</span><span class="pi">:</span> <span class="s">/blog.html</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">About</span>
  <span class="na">link</span><span class="pi">:</span> <span class="s">/about.html</span>
</code></pre></div></div>

<p>同时,在这里就可以应用我们之前提到的CSS样式文件了,在navigation.html文件的第四行加入<code class="language-plaintext highlighter-rouge">class="current"</code>,即我们之前设置的current节点的样式,如下:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">""</span> <span class="nt">&gt;</span>
</code></pre></div></div>

<h2 id="点缀添加主页及标签页的图标">点缀:添加主页及标签页的图标</h2>

<p>一般在浏览器中,打开的标签页左边都会有个小图标,我们的网站也可以实现这个功能,只需要将制作好的ico图标文件放在<code class="language-plaintext highlighter-rouge">assets/images/favicon.ico</code>即可,jekyll就会找到图标的位置,然后在default.html的<code class="language-plaintext highlighter-rouge">&lt;head&gt;&lt;/head&gt;</code>中加入:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">&lt;!-- 下面两行用于生成主页标签页以及子网页标签页上面的小图标 --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"shortcut icon"</span> <span class="na">href=</span><span class="s">"/assets/images/favicon.ico"</span> <span class="na">type=</span><span class="s">"image/x-icon"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"bookmark"</span> <span class="na">href=</span><span class="s">"/assets/images/favicon.ico"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p>就可以正确显示标签页图标了.</p>

<p>最后的default.html文件如下:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- 添加CSS路径到当前文件 --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/assets/css/styles.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>Github pages博客  搭建与配置<span class="nt">&lt;/title&gt;</span>

  <span class="c">&lt;!-- 下面两行用于生成主页标签页以及子网页标签页上面的小图标 --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"shortcut icon"</span> <span class="na">href=</span><span class="s">"/assets/images/favicon.ico"</span> <span class="na">type=</span><span class="s">"image/x-icon"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"bookmark"</span> <span class="na">href=</span><span class="s">"/assets/images/favicon.ico"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="c">&lt;!-- 设置导航栏 --&gt;</span>
  <span class="c">&lt;!-- 使当前网页高亮显示 --&gt;</span>
<span class="nt">&lt;nav&gt;</span>
  
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/"</span> <span class="nt">&gt;</span>
      Home
    <span class="nt">&lt;/a&gt;</span>
  
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/blog.html"</span> <span class="nt">&gt;</span>
      Blog
    <span class="nt">&lt;/a&gt;</span>
  
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/about.html"</span> <span class="nt">&gt;</span>
      About
    <span class="nt">&lt;/a&gt;</span>
  
<span class="nt">&lt;/nav&gt;</span>

  
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h1 id="文件树目录">文件树目录</h1>

<p>这里是最后的文件树目录,还是挺复杂的..</p>

<p>注意这里是没有启动过<code class="language-plaintext highlighter-rouge">Jekyll server</code>服务的,开启之后还会生成一些文件夹,如<code class="language-plaintext highlighter-rouge">_site</code>文件夹(jekyll引擎生成的站点文件都在这里)和<code class="language-plaintext highlighter-rouge">.jekyll_cache</code>文件夹(缓存文件).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── README.md
├── _config.yml
├── _data
│   └── navigation.yml
├── _includes
│   └── navigation.html
├── _layouts
│   ├── default.html
│   └── post.html
├── _posts
│   ├── 2021-03-25-blog1.md
│   └── 2021-03-26-blog2.md
├── _sass
│   └── main.scss
├── about.md
├── assets
│   ├── css
│   │   └── styles.scss
│   └── images
│       └── favicon.ico
├── blog.html
└── index.md
</code></pre></div></div>

<h1 id="jekyll本地服务部署">Jekyll本地服务部署</h1>

<p>有两种生成静态网页的方式:</p>

<p><code class="language-plaintext highlighter-rouge">cd</code>到当前目录(即<code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>),可以采用<code class="language-plaintext highlighter-rouge">jekyll build</code>构建静态网页或者<code class="language-plaintext highlighter-rouge">jekyll server</code>启动服务,这里还是建议直接用<code class="language-plaintext highlighter-rouge">server</code>,开启服务,然后就可以在浏览器输入<code class="language-plaintext highlighter-rouge">http://localhost:4000</code>进入你的静态网页了.</p>

<p>使用<code class="language-plaintext highlighter-rouge">control+C</code>即可关闭服务,在Jekyll的官方文档中提到: <strong>如果修改了config.yml配置或其他yml文件的配置</strong>,那就需要<code class="language-plaintext highlighter-rouge">control+C</code>中止服务并重启服务来刷新配置.</p>

<h1 id="最后成果与小结">最后成果与小结</h1>

<p>还是单调了点,之后慢慢学前端的知识再丰富自己的网站吧.</p>

<p>最后附上我的GitHub Pages Blog:<a href="https://apocaly-pse.github.io">apocaly-pse.github.io</a>.</p>

<h1 id="参考">参考</h1>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2" role="doc-endnote">
      <p><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门 - 阮一峰的网络日志</a>; <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="https://jekyllrb.com/docs/step-by-step/01-setup/">Jekyll Step by Step Tutorial</a>; <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:3:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://jekyllrb.com/docs/installation/macos/">Jekyll on macOS</a>; <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET